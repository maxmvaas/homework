// 1. Удалить первый указанный элемент из вектора.
bool RemoveFirst(T x) {
		for (int i = 0; i < size; ++i) {
			if (x == vector[i]) {
				toDelete = vector[i];
				for (int j = i; j < size - 1; ++j) {
					vector[j] = vector[j + 1];
					return true;
				}
			}
		}
		return false;
	}
  // 2. Реализовать метод InsertAfter.
  bool InsertAfter(T toInsert, T insertAfter) {
		bool result = false;
		for (int i = 0; i < size; ++i) {
			if (vector[i] == InsertAfter) {
				for (int j = size; j > i; --j) {
					vector[j] = vector[j - 1];
				}
				vector[i] = toInsert;
				++size;
				result = true;
			}
		}
		return result;
	}
  // 3. Создать функцию, которая возвращает список без заданного элемента.
  template <typename T> List newList(List list, T x) {
	List result;
	T element;
	for (int i = 0; i < list.Size; ++i) {
		T = list.get(i);
		if (T != x) {
			result.Push_back(T);
		}
	}
	return result;
}
// 3.5. Создать метод, удаляющий все вхождения введенного элемента.
template <typename T> void DeleteThis(T x) {
		for (Element* current = head; current != nullptr; current = current->next) {
			if (current->inf = x) {
				current->prev->next = current->next;
				current->next->prev = current->prev;
				delete current;
			}
		}
	}
